{"nodes":[{"content":"Job preparation and cleanup in Batch | Microsoft Azure","pos":[27,81]},{"content":"Use job-level preparation tasks to minimize data transfer to Azure Batch compute nodes, and release tasks for node cleanup at job completion.","pos":[100,241]},{"content":"Run job preparation and completion tasks on Azure Batch compute nodes","pos":[546,615]},{"content":"An Azure Batch job often requires some form of setup before its tasks are executed, and post-job maintenance when its tasks are completed.","pos":[618,756]},{"content":"You might need to download common task input data to your compute nodes, or upload task output data to Azure Storage after the job completes.","pos":[757,898]},{"content":"You can use <bpt id=\"p1\">**</bpt>job preparation<ept id=\"p1\">**</ept> and <bpt id=\"p2\">**</bpt>job release<ept id=\"p2\">**</ept> tasks to perform these operations.","pos":[899,985],"source":" You can use **job preparation** and **job release** tasks to perform these operations."},{"content":"What are job preparation and release tasks?","pos":[990,1033]},{"content":"Before a job's tasks run, the job preparation task runs on all compute nodes scheduled to run at least one task.","pos":[1035,1147]},{"content":"Once the job is completed, the job release task runs on each node in the pool that executed at least one task.","pos":[1148,1258]},{"content":"As with normal Batch tasks, you can specify a command line to be invoked when a job preparation or release task is run.","pos":[1259,1378]},{"pos":[1380,1634],"content":"Job preparation and release tasks offer familiar Batch task features such as file download (<bpt id=\"p1\">[</bpt>resource files<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>net_job_prep_resourcefiles<ept id=\"p2\">]</ept>), elevated execution, custom environment variables, maximum execution duration, retry count, and file retention time.","source":"Job preparation and release tasks offer familiar Batch task features such as file download ([resource files][net_job_prep_resourcefiles]), elevated execution, custom environment variables, maximum execution duration, retry count, and file retention time."},{"pos":[1636,1815],"content":"In the following sections, you'll learn how to use the <bpt id=\"p1\">[</bpt>JobPreparationTask<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>net_job_prep<ept id=\"p2\">]</ept> and <bpt id=\"p3\">[</bpt>JobReleaseTask<ept id=\"p3\">]</ept><bpt id=\"p4\">[</bpt>net_job_release<ept id=\"p4\">]</ept> classes found in the <bpt id=\"p5\">[</bpt>Batch .NET<ept id=\"p5\">]</ept><bpt id=\"p6\">[</bpt>api_net<ept id=\"p6\">]</ept> library.","source":"In the following sections, you'll learn how to use the [JobPreparationTask][net_job_prep] and [JobReleaseTask][net_job_release] classes found in the [Batch .NET][api_net] library."},{"pos":[1831,2003],"content":"Job preparation and release tasks are especially helpful in \"shared pool\" environments, in which a pool of compute nodes persists between job runs and is used by many jobs."},{"content":"When to use job preparation and release tasks","pos":[2008,2053]},{"content":"Job preparation and job release tasks are a good fit for the following situations:","pos":[2055,2137]},{"content":"Download common task data","pos":[2141,2166]},{"content":"Batch jobs often require a common set of data as input for the job's tasks.","pos":[2170,2245]},{"content":"For example, in daily risk analysis calculations, market data is job-specific, yet common to all tasks in the job.","pos":[2246,2360]},{"content":"This market data, often several gigabytes in size, should be downloaded to each compute node only once so that any task that runs on the node can use it.","pos":[2361,2514]},{"content":"Use a <bpt id=\"p1\">**</bpt>job preparation task<ept id=\"p1\">**</ept> to download this data to each node before the execution of the job's other tasks.","pos":[2515,2627],"source":" Use a **job preparation task** to download this data to each node before the execution of the job's other tasks."},{"content":"Delete job and task output","pos":[2631,2657]},{"content":"In a \"shared pool\" environment, where a pool's compute nodes are not decommissioned between jobs, you may need to delete job data between runs.","pos":[2661,2804]},{"content":"You might need to conserve disk space on the nodes, or satisfy your organization's security policies.","pos":[2805,2906]},{"content":"Use a <bpt id=\"p1\">**</bpt>job release task<ept id=\"p1\">**</ept> to delete data that was downloaded by a job preparation task, or generated during task execution.","pos":[2907,3031],"source":" Use a **job release task** to delete data that was downloaded by a job preparation task, or generated during task execution."},{"content":"Log retention","pos":[3035,3048]},{"content":"You might want to keep a copy of log files that your tasks generate, or perhaps crash dump files that can be generated by failed applications.","pos":[3052,3194]},{"content":"Use a <bpt id=\"p1\">**</bpt>job release task<ept id=\"p1\">**</ept> in such cases to compress and upload this data to an <bpt id=\"p2\">[</bpt>Azure Storage<ept id=\"p2\">]</ept><bpt id=\"p3\">[</bpt>azure_storage<ept id=\"p3\">]</ept> account.","pos":[3195,3314],"source":" Use a **job release task** in such cases to compress and upload this data to an [Azure Storage][azure_storage] account."},{"pos":[3329,3467],"content":"Another way to persist logs and other job and task output data is to use the <bpt id=\"p1\">[</bpt>Azure Batch File Conventions<ept id=\"p1\">](batch-task-output.md)</ept> library.","source":" Another way to persist logs and other job and task output data is to use the [Azure Batch File Conventions](batch-task-output.md) library."},{"content":"Job preparation task","pos":[3472,3492]},{"content":"Before execution of a job's tasks, Batch executes the job preparation task on each compute node that is scheduled to run a task.","pos":[3494,3622]},{"content":"By default, the Batch service waits for the job preparation task to be completed before running the tasks scheduled to execute on the node.","pos":[3623,3762]},{"content":"However, you can configure the service not to wait.","pos":[3763,3814]},{"content":"If the node restarts, the job preparation task runs again, but you can also disable this behavior.","pos":[3815,3913]},{"content":"The job preparation task is executed only on nodes that are scheduled to run a task.","pos":[3915,3999]},{"content":"This prevents the unnecessary execution of a preparation task in case a node is not assigned a task.","pos":[4000,4100]},{"content":"This can occur when the number of tasks for a job is less than the number of nodes in a pool.","pos":[4101,4194]},{"content":"It also applies when <bpt id=\"p1\">[</bpt>concurrent task execution<ept id=\"p1\">](batch-parallel-node-tasks.md)</ept> is enabled, which leaves some nodes idle if the task count is lower than the total possible concurrent tasks.","pos":[4195,4383],"source":" It also applies when [concurrent task execution](batch-parallel-node-tasks.md) is enabled, which leaves some nodes idle if the task count is lower than the total possible concurrent tasks."},{"content":"By not running the job preparation task on idle nodes, you can spend less money on data transfer charges.","pos":[4384,4489]},{"pos":[4506,4746],"content":"<bpt id=\"p1\">[</bpt>JobPreparationTask<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>net_job_prep_cloudjob<ept id=\"p2\">]</ept> differs from <bpt id=\"p3\">[</bpt>CloudPool.StartTask<ept id=\"p3\">]</ept><bpt id=\"p4\">[</bpt>pool_starttask<ept id=\"p4\">]</ept> in that JobPreparationTask executes at the start of each job, whereas StartTask executes only when a compute node first joins a pool or restarts.","source":"[JobPreparationTask][net_job_prep_cloudjob] differs from [CloudPool.StartTask][pool_starttask] in that JobPreparationTask executes at the start of each job, whereas StartTask executes only when a compute node first joins a pool or restarts."},{"content":"Job release task","pos":[4751,4767]},{"content":"Once a job is marked as completed, the job release task is executed on each node in the pool that executed at least one task.","pos":[4769,4894]},{"content":"You mark a job as completed by issuing a terminate request.","pos":[4895,4954]},{"content":"The Batch service then sets the job state to <bpt id=\"p1\">*</bpt>terminating<ept id=\"p1\">*</ept>, terminates any active or running tasks associated with the job, and runs the job release task.","pos":[4955,5109],"source":" The Batch service then sets the job state to *terminating*, terminates any active or running tasks associated with the job, and runs the job release task."},{"content":"The job then moves to the <bpt id=\"p1\">*</bpt>completed<ept id=\"p1\">*</ept> state.","pos":[5110,5154],"source":" The job then moves to the *completed* state."},{"content":"Job deletion also executes the job release task.","pos":[5171,5219]},{"content":"However, if a job has already been terminated, the release task is not run a second time if the job is later deleted.","pos":[5220,5337]},{"content":"Job prep and release tasks with Batch .NET","pos":[5342,5384]},{"content":"To use a job preparation task, assign a <bpt id=\"p1\">[</bpt>JobPreparationTask<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>net_job_prep<ept id=\"p2\">]</ept> object to your job's <bpt id=\"p3\">[</bpt>CloudJob.JobPreparationTask<ept id=\"p3\">]</ept><bpt id=\"p4\">[</bpt>net_job_prep_cloudjob<ept id=\"p4\">]</ept> property.","pos":[5386,5544],"source":"To use a job preparation task, assign a [JobPreparationTask][net_job_prep] object to your job's [CloudJob.JobPreparationTask][net_job_prep_cloudjob] property."},{"content":"Similarly, initialize a <bpt id=\"p1\">[</bpt>JobReleaseTask<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>net_job_release<ept id=\"p2\">]</ept> and assign it to your job's <bpt id=\"p3\">[</bpt>CloudJob.JobReleaseTask<ept id=\"p3\">]</ept><bpt id=\"p4\">[</bpt>net_job_prep_cloudjob<ept id=\"p4\">]</ept> property to set the job's release task.","pos":[5545,5719],"source":" Similarly, initialize a [JobReleaseTask][net_job_release] and assign it to your job's [CloudJob.JobReleaseTask][net_job_prep_cloudjob] property to set the job's release task."},{"pos":[5721,5868],"content":"In this code snippet, <ph id=\"ph1\">`myBatchClient`</ph> is an instance of <bpt id=\"p1\">[</bpt>BatchClient<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>net_batch_client<ept id=\"p2\">]</ept>, and <ph id=\"ph2\">`myPool`</ph> is an existing pool within the Batch account.","source":"In this code snippet, `myBatchClient` is an instance of [BatchClient][net_batch_client], and `myPool` is an existing pool within the Batch account."},{"content":"As mentioned earlier, the release task is executed when a job is terminated or deleted.","pos":[6642,6729]},{"content":"Terminate a job with <bpt id=\"p1\">[</bpt>JobOperations.TerminateJobAsync<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>net_job_terminate<ept id=\"p2\">]</ept>.","pos":[6730,6804],"source":" Terminate a job with [JobOperations.TerminateJobAsync][net_job_terminate]."},{"content":"Delete a job with <bpt id=\"p1\">[</bpt>JobOperations.DeleteJobAsync<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>net_job_delete<ept id=\"p2\">]</ept>.","pos":[6805,6870],"source":" Delete a job with [JobOperations.DeleteJobAsync][net_job_delete]."},{"content":"You typically terminate or delete a job when its tasks are completed, or when a timeout that you've defined has been reached.","pos":[6871,6996]},{"content":"Code sample on GitHub","pos":[7382,7403]},{"content":"To see job preparation and release tasks in action, check out the <bpt id=\"p1\">[</bpt>JobPrepRelease<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>job_prep_release_sample<ept id=\"p2\">]</ept> sample project on GitHub.","pos":[7405,7538],"source":"To see job preparation and release tasks in action, check out the [JobPrepRelease][job_prep_release_sample] sample project on GitHub."},{"content":"This console application does the following:","pos":[7539,7583]},{"content":"Creates a pool with two \"small\" nodes.","pos":[7588,7626]},{"content":"Creates a job with job preparation, release, and standard tasks.","pos":[7630,7694]},{"content":"Runs the job preparation task, which first writes the node ID to a text file in a node's \"shared\" directory.","pos":[7698,7806]},{"content":"Runs a task on each node that writes its task ID to the same text file.","pos":[7810,7881]},{"content":"Once all tasks are completed (or the timeout is reached), prints the contents of each node's text file to the console.","pos":[7885,8003]},{"content":"When the job is completed, runs the job release task to delete the file from the node.","pos":[8007,8093]},{"content":"Prints the exit codes of the job preparation and release tasks for each node on which they executed.","pos":[8097,8197]},{"content":"Pauses execution to allow confirmation of job and/or pool deletion.","pos":[8201,8268]},{"content":"Output from the sample application is similar to the following:","pos":[8270,8333]},{"content":"Due to the variable creation and start time of nodes in a new pool (some nodes are ready for tasks before others), you may see different output.","pos":[9397,9541]},{"content":"Specifically, because the tasks complete quickly, one of the pool's nodes may execute all of the job's tasks.","pos":[9542,9651]},{"content":"If this occurs, you will notice that the job prep and release tasks do not exist for the node that executed no tasks.","pos":[9652,9769]},{"content":"Inspect job preparation and release tasks in the Azure portal","pos":[9775,9836]},{"pos":[9838,10037],"content":"When you run the sample application, you can use the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>portal<ept id=\"p2\">]</ept> to view the properties of the job and its tasks, or even download the shared text file that is modified by the job's tasks.","source":"When you run the sample application, you can use the [Azure portal][portal] to view the properties of the job and its tasks, or even download the shared text file that is modified by the job's tasks."},{"content":"The screenshot below shows the <bpt id=\"p1\">**</bpt>Preparation tasks blade<ept id=\"p1\">**</ept> in the Azure portal after a run of the sample application.","pos":[10039,10156],"source":"The screenshot below shows the **Preparation tasks blade** in the Azure portal after a run of the sample application."},{"content":"Navigate to the <bpt id=\"p1\">*</bpt>JobPrepReleaseSampleJob<ept id=\"p1\">*</ept> properties after your tasks have completed (but before deleting your job and pool) and click <bpt id=\"p2\">**</bpt>Preparation tasks<ept id=\"p2\">**</ept> or <bpt id=\"p3\">**</bpt>Release tasks<ept id=\"p3\">**</ept> to view their properties.","pos":[10157,10360],"source":" Navigate to the *JobPrepReleaseSampleJob* properties after your tasks have completed (but before deleting your job and pool) and click **Preparation tasks** or **Release tasks** to view their properties."},{"content":"Job preparation properties in Azure portal","pos":[10364,10406]},{"content":"Next steps","pos":[10415,10425]},{"content":"Application packages","pos":[10431,10451]},{"content":"In addition to the job preparation task, you can also use the <bpt id=\"p1\">[</bpt>application packages<ept id=\"p1\">](batch-application-packages.md)</ept> feature of Batch to prepare compute nodes for task execution.","pos":[10453,10630],"source":"In addition to the job preparation task, you can also use the [application packages](batch-application-packages.md) feature of Batch to prepare compute nodes for task execution."},{"content":"This feature is especially useful for deploying applications that do not require running an installer, applications that contain many (100+) files, or applications that require strict version control.","pos":[10631,10831]},{"content":"Installing applications and staging data","pos":[10837,10877]},{"content":"This MSDN forum post provides an overview of several methods of preparing your nodes for running tasks:","pos":[10879,10982]},{"pos":[10984,11061],"content":"<bpt id=\"p1\">[</bpt>Installing applications and staging data on Batch compute nodes<ept id=\"p1\">]</ept><bpt id=\"p2\">[</bpt>forum_post<ept id=\"p2\">]</ept>","source":"[Installing applications and staging data on Batch compute nodes][forum_post]"},{"content":"Written by one of the Azure Batch team members, it discusses several techniques that you can use to deploy applications and data to compute nodes.","pos":[11063,11209]},{"content":"api_net","pos":[11212,11219]},{"content":"api_net_listjobs","pos":[11277,11293]},{"content":"api_rest","pos":[11388,11396]},{"content":"azure_storage","pos":[11454,11467]},{"content":"portal","pos":[11517,11523]},{"content":"job_prep_release_sample","pos":[11552,11575]},{"content":"forum_post","pos":[11674,11684]},{"content":"net_batch_client","pos":[11853,11869]},{"content":"net_cloudjob","pos":[11953,11965]},{"content":"net_job_prep","pos":[12045,12057]},{"content":"net_job_prep_cloudjob","pos":[12148,12169]},{"content":"net_job_prep_resourcefiles","pos":[12269,12295]},{"content":"net_job_delete","pos":[12400,12414]},{"content":"net_job_terminate","pos":[12515,12532]},{"content":"net_job_release","pos":[12636,12651]},{"content":"net_job_release_cloudjob","pos":[12738,12762]},{"content":"pool_starttask","pos":[12858,12872]},{"content":"net_list_certs","pos":[12965,12979]},{"content":"net_list_compute_nodes","pos":[13090,13112]},{"content":"net_list_job_schedules","pos":[13216,13238]},{"content":"net_list_jobprep_status","pos":[13349,13372]},{"content":"net_list_jobs","pos":[13497,13510]},{"content":"net_list_nodefiles","pos":[13605,13623]},{"content":"net_list_pools","pos":[13723,13737]},{"content":"net_list_schedule_jobs","pos":[13834,13856]},{"content":"net_list_task_files","pos":[13959,13978]},{"content":"net_list_tasks","pos":[14074,14088]},{"content":"1","pos":[14185,14186]}],"content":"<properties\n    pageTitle=\"Job preparation and cleanup in Batch | Microsoft Azure\"\n    description=\"Use job-level preparation tasks to minimize data transfer to Azure Batch compute nodes, and release tasks for node cleanup at job completion.\"\n    services=\"batch\"\n    documentationCenter=\".net\"\n    authors=\"mmacy\"\n    manager=\"timlt\"\n    editor=\"\" />\n\n<tags\n    ms.service=\"batch\"\n    ms.devlang=\"multiple\"\n    ms.topic=\"article\"\n    ms.tgt_pltfrm=\"vm-windows\"\n    ms.workload=\"big-compute\"\n    ms.date=\"09/16/2016\"\n    ms.author=\"marsma\" />\n\n# Run job preparation and completion tasks on Azure Batch compute nodes\n\n An Azure Batch job often requires some form of setup before its tasks are executed, and post-job maintenance when its tasks are completed. You might need to download common task input data to your compute nodes, or upload task output data to Azure Storage after the job completes. You can use **job preparation** and **job release** tasks to perform these operations.\n\n## What are job preparation and release tasks?\n\nBefore a job's tasks run, the job preparation task runs on all compute nodes scheduled to run at least one task. Once the job is completed, the job release task runs on each node in the pool that executed at least one task. As with normal Batch tasks, you can specify a command line to be invoked when a job preparation or release task is run.\n\nJob preparation and release tasks offer familiar Batch task features such as file download ([resource files][net_job_prep_resourcefiles]), elevated execution, custom environment variables, maximum execution duration, retry count, and file retention time.\n\nIn the following sections, you'll learn how to use the [JobPreparationTask][net_job_prep] and [JobReleaseTask][net_job_release] classes found in the [Batch .NET][api_net] library.\n\n> [AZURE.TIP] Job preparation and release tasks are especially helpful in \"shared pool\" environments, in which a pool of compute nodes persists between job runs and is used by many jobs.\n\n## When to use job preparation and release tasks\n\nJob preparation and job release tasks are a good fit for the following situations:\n\n**Download common task data**\n\nBatch jobs often require a common set of data as input for the job's tasks. For example, in daily risk analysis calculations, market data is job-specific, yet common to all tasks in the job. This market data, often several gigabytes in size, should be downloaded to each compute node only once so that any task that runs on the node can use it. Use a **job preparation task** to download this data to each node before the execution of the job's other tasks.\n\n**Delete job and task output**\n\nIn a \"shared pool\" environment, where a pool's compute nodes are not decommissioned between jobs, you may need to delete job data between runs. You might need to conserve disk space on the nodes, or satisfy your organization's security policies. Use a **job release task** to delete data that was downloaded by a job preparation task, or generated during task execution.\n\n**Log retention**\n\nYou might want to keep a copy of log files that your tasks generate, or perhaps crash dump files that can be generated by failed applications. Use a **job release task** in such cases to compress and upload this data to an [Azure Storage][azure_storage] account.\n\n>[AZURE.TIP] Another way to persist logs and other job and task output data is to use the [Azure Batch File Conventions](batch-task-output.md) library.\n\n## Job preparation task\n\nBefore execution of a job's tasks, Batch executes the job preparation task on each compute node that is scheduled to run a task. By default, the Batch service waits for the job preparation task to be completed before running the tasks scheduled to execute on the node. However, you can configure the service not to wait. If the node restarts, the job preparation task runs again, but you can also disable this behavior.\n\nThe job preparation task is executed only on nodes that are scheduled to run a task. This prevents the unnecessary execution of a preparation task in case a node is not assigned a task. This can occur when the number of tasks for a job is less than the number of nodes in a pool. It also applies when [concurrent task execution](batch-parallel-node-tasks.md) is enabled, which leaves some nodes idle if the task count is lower than the total possible concurrent tasks. By not running the job preparation task on idle nodes, you can spend less money on data transfer charges.\n\n> [AZURE.NOTE] [JobPreparationTask][net_job_prep_cloudjob] differs from [CloudPool.StartTask][pool_starttask] in that JobPreparationTask executes at the start of each job, whereas StartTask executes only when a compute node first joins a pool or restarts.\n\n## Job release task\n\nOnce a job is marked as completed, the job release task is executed on each node in the pool that executed at least one task. You mark a job as completed by issuing a terminate request. The Batch service then sets the job state to *terminating*, terminates any active or running tasks associated with the job, and runs the job release task. The job then moves to the *completed* state.\n\n> [AZURE.NOTE] Job deletion also executes the job release task. However, if a job has already been terminated, the release task is not run a second time if the job is later deleted.\n\n## Job prep and release tasks with Batch .NET\n\nTo use a job preparation task, assign a [JobPreparationTask][net_job_prep] object to your job's [CloudJob.JobPreparationTask][net_job_prep_cloudjob] property. Similarly, initialize a [JobReleaseTask][net_job_release] and assign it to your job's [CloudJob.JobReleaseTask][net_job_prep_cloudjob] property to set the job's release task.\n\nIn this code snippet, `myBatchClient` is an instance of [BatchClient][net_batch_client], and `myPool` is an existing pool within the Batch account.\n\n```csharp\n// Create the CloudJob for CloudPool \"myPool\"\nCloudJob myJob =\n    myBatchClient.JobOperations.CreateJob(\n        \"JobPrepReleaseSampleJob\",\n        new PoolInformation() { PoolId = \"myPool\" });\n\n// Specify the command lines for the job preparation and release tasks\nstring jobPrepCmdLine =\n    \"cmd /c echo %AZ_BATCH_NODE_ID% > %AZ_BATCH_NODE_SHARED_DIR%\\\\shared_file.txt\";\nstring jobReleaseCmdLine =\n    \"cmd /c del %AZ_BATCH_NODE_SHARED_DIR%\\\\shared_file.txt\";\n\n// Assign the job preparation task to the job\nmyJob.JobPreparationTask =\n    new JobPreparationTask { CommandLine = jobPrepCmdLine };\n\n// Assign the job release task to the job\nmyJob.JobReleaseTask =\n    new JobPreparationTask { CommandLine = jobReleaseCmdLine };\n\nawait myJob.CommitAsync();\n```\n\nAs mentioned earlier, the release task is executed when a job is terminated or deleted. Terminate a job with [JobOperations.TerminateJobAsync][net_job_terminate]. Delete a job with [JobOperations.DeleteJobAsync][net_job_delete]. You typically terminate or delete a job when its tasks are completed, or when a timeout that you've defined has been reached.\n\n```csharp\n// Terminate the job to mark it as Completed; this will initiate the\n// Job Release Task on any node that executed job tasks. Note that the\n// Job Release Task is also executed when a job is deleted, thus you\n// need not call Terminate if you typically delete jobs after task completion.\nawait myBatchClient.JobOperations.TerminateJobAsy(\"JobPrepReleaseSampleJob\");\n```\n\n## Code sample on GitHub\n\nTo see job preparation and release tasks in action, check out the [JobPrepRelease][job_prep_release_sample] sample project on GitHub. This console application does the following:\n\n1. Creates a pool with two \"small\" nodes.\n2. Creates a job with job preparation, release, and standard tasks.\n3. Runs the job preparation task, which first writes the node ID to a text file in a node's \"shared\" directory.\n4. Runs a task on each node that writes its task ID to the same text file.\n5. Once all tasks are completed (or the timeout is reached), prints the contents of each node's text file to the console.\n6. When the job is completed, runs the job release task to delete the file from the node.\n6. Prints the exit codes of the job preparation and release tasks for each node on which they executed.\n7. Pauses execution to allow confirmation of job and/or pool deletion.\n\nOutput from the sample application is similar to the following:\n\n```\nAttempting to create pool: JobPrepReleaseSamplePool\nCreated pool JobPrepReleaseSamplePool with 2 small nodes\nChecking for existing job JobPrepReleaseSampleJob...\nJob JobPrepReleaseSampleJob not found, creating...\nSubmitting tasks and awaiting completion...\nAll tasks completed.\n\nContents of shared\\job_prep_and_release.txt on tvm-2434664350_1-20160623t173951z:\n-------------------------------------------\ntvm-2434664350_1-20160623t173951z tasks:\n  task001\n  task004\n  task005\n  task006\n\nContents of shared\\job_prep_and_release.txt on tvm-2434664350_2-20160623t173951z:\n-------------------------------------------\ntvm-2434664350_2-20160623t173951z tasks:\n  task008\n  task002\n  task003\n  task007\n\nWaiting for job JobPrepReleaseSampleJob to reach state Completed\n...\n\ntvm-2434664350_1-20160623t173951z:\n  Prep task exit code:    0\n  Release task exit code: 0\n\ntvm-2434664350_2-20160623t173951z:\n  Prep task exit code:    0\n  Release task exit code: 0\n\nDelete job? [yes] no\nyes\nDelete pool? [yes] no\nyes\n\nSample complete, hit ENTER to exit...\n```\n\n>[AZURE.NOTE] Due to the variable creation and start time of nodes in a new pool (some nodes are ready for tasks before others), you may see different output. Specifically, because the tasks complete quickly, one of the pool's nodes may execute all of the job's tasks. If this occurs, you will notice that the job prep and release tasks do not exist for the node that executed no tasks.\n\n### Inspect job preparation and release tasks in the Azure portal\n\nWhen you run the sample application, you can use the [Azure portal][portal] to view the properties of the job and its tasks, or even download the shared text file that is modified by the job's tasks.\n\nThe screenshot below shows the **Preparation tasks blade** in the Azure portal after a run of the sample application. Navigate to the *JobPrepReleaseSampleJob* properties after your tasks have completed (but before deleting your job and pool) and click **Preparation tasks** or **Release tasks** to view their properties.\n\n![Job preparation properties in Azure portal][1]\n\n## Next steps\n\n### Application packages\n\nIn addition to the job preparation task, you can also use the [application packages](batch-application-packages.md) feature of Batch to prepare compute nodes for task execution. This feature is especially useful for deploying applications that do not require running an installer, applications that contain many (100+) files, or applications that require strict version control.\n\n### Installing applications and staging data\n\nThis MSDN forum post provides an overview of several methods of preparing your nodes for running tasks:\n\n[Installing applications and staging data on Batch compute nodes][forum_post]\n\nWritten by one of the Azure Batch team members, it discusses several techniques that you can use to deploy applications and data to compute nodes.\n\n[api_net]: http://msdn.microsoft.com/library/azure/mt348682.aspx\n[api_net_listjobs]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.joboperations.listjobs.aspx\n[api_rest]: http://msdn.microsoft.com/library/azure/dn820158.aspx\n[azure_storage]: https://azure.microsoft.com/services/storage/\n[portal]: https://portal.azure.com\n[job_prep_release_sample]: https://github.com/Azure/azure-batch-samples/tree/master/CSharp/ArticleProjects/JobPrepRelease\n[forum_post]: https://social.msdn.microsoft.com/Forums/en-US/87b19671-1bdf-427a-972c-2af7e5ba82d9/installing-applications-and-staging-data-on-batch-compute-nodes?forum=azurebatch\n[net_batch_client]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.batchclient.aspx\n[net_cloudjob]:https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudjob.aspx\n[net_job_prep]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.jobpreparationtask.aspx\n[net_job_prep_cloudjob]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudjob.jobpreparationtask.aspx\n[net_job_prep_resourcefiles]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.jobpreparationtask.resourcefiles.aspx\n[net_job_delete]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.joboperations.deletejobasync.aspx\n[net_job_terminate]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.joboperations.terminatejobasync.aspx\n[net_job_release]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.jobreleasetask.aspx\n[net_job_release_cloudjob]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudjob.jobreleasetask.aspx\n[pool_starttask]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudpool.starttask.aspx\n\n[net_list_certs]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.certificateoperations.listcertificates.aspx\n[net_list_compute_nodes]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.listcomputenodes.aspx\n[net_list_job_schedules]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.jobscheduleoperations.listjobschedules.aspx\n[net_list_jobprep_status]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.joboperations.listjobpreparationandreleasetaskstatus.aspx\n[net_list_jobs]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.joboperations.listjobs.aspx\n[net_list_nodefiles]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.joboperations.listnodefiles.aspx\n[net_list_pools]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.pooloperations.listpools.aspx\n[net_list_schedule_jobs]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.jobscheduleoperations.listjobs.aspx\n[net_list_task_files]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.cloudtask.listnodefiles.aspx\n[net_list_tasks]: https://msdn.microsoft.com/library/azure/microsoft.azure.batch.joboperations.listtasks.aspx\n\n[1]: ./media/batch-job-prep-release/portal-jobprep-01.png\n"}