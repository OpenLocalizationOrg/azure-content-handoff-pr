{"nodes":[{"content":"Receive messages with EventProcessorHost","pos":[3,43]},{"content":"<bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept> is a .NET class that simplifies receiving events from Event Hubs by managing persistent checkpoints and parallel receives from those Event Hubs.","pos":[45,212],"source":"[EventProcessorHost][] is a .NET class that simplifies receiving events from Event Hubs by managing persistent checkpoints and parallel receives from those Event Hubs."},{"content":"Using <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>, you can split events across multiple receivers, even when hosted in different nodes.","pos":[213,327],"source":" Using [EventProcessorHost][], you can split events across multiple receivers, even when hosted in different nodes."},{"content":"This example shows how to use <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept> for a single receiver.","pos":[328,403],"source":" This example shows how to use [EventProcessorHost][] for a single receiver."},{"content":"The <bpt id=\"p1\">[</bpt>Scaled out event processing<ept id=\"p1\">][]</ept> sample shows how to use <bpt id=\"p2\">[</bpt>EventProcessorHost<ept id=\"p2\">][]</ept> with multiple receivers.","pos":[404,511],"source":" The [Scaled out event processing][] sample shows how to use [EventProcessorHost][] with multiple receivers."},{"pos":[513,587],"content":"To use <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>, you must have an <bpt id=\"p2\">[</bpt>Azure Storage account<ept id=\"p2\">][]</ept>:","source":"To use [EventProcessorHost][], you must have an [Azure Storage account][]:"},{"pos":[592,672],"content":"Log on to the <bpt id=\"p1\">[</bpt>Azure portal<ept id=\"p1\">][]</ept>, and click <bpt id=\"p2\">**</bpt>New<ept id=\"p2\">**</ept> at the top left of the screen.","source":"Log on to the [Azure portal][], and click **New** at the top left of the screen."},{"pos":[677,734],"content":"Click <bpt id=\"p1\">**</bpt>Data + Storage<ept id=\"p1\">**</ept>, then click <bpt id=\"p2\">**</bpt>Storage account<ept id=\"p2\">**</ept>.","source":"Click **Data + Storage**, then click **Storage account**."},{"content":"In the <bpt id=\"p1\">**</bpt>Create storage account<ept id=\"p1\">**</ept> blade, type a name for the storage account.","pos":[825,902],"source":"In the **Create storage account** blade, type a name for the storage account."},{"content":"Choose an Azure subscription, resource group, and location in which to create the resource.","pos":[903,994]},{"content":"Then click <bpt id=\"p1\">**</bpt>Create<ept id=\"p1\">**</ept>.","pos":[995,1017],"source":" Then click **Create**."},{"content":"In the list of storage accounts, click the newly-created storage account.","pos":[1108,1181]},{"content":"In the storage account blade, click <bpt id=\"p1\">**</bpt>Access keys<ept id=\"p1\">**</ept>.","pos":[1186,1238],"source":"In the storage account blade, click **Access keys**."},{"content":"Copy the value of <bpt id=\"p1\">**</bpt>key1<ept id=\"p1\">**</ept> to use later in this tutorial.","pos":[1239,1296],"source":" Copy the value of **key1** to use later in this tutorial."},{"content":"In Visual Studio, create a new Visual C# Desktop App project using the <bpt id=\"p1\">**</bpt>Console  Application<ept id=\"p1\">**</ept> project template.","pos":[1387,1500],"source":"In Visual Studio, create a new Visual C# Desktop App project using the **Console  Application** project template."},{"content":"Name the project <bpt id=\"p1\">**</bpt>Receiver<ept id=\"p1\">**</ept>.","pos":[1501,1531],"source":" Name the project **Receiver**."},{"pos":[1630,1732],"content":"In Solution Explorer, right-click the solution, and then click <bpt id=\"p1\">**</bpt>Manage NuGet Packages for Solution<ept id=\"p1\">**</ept>.","source":"In Solution Explorer, right-click the solution, and then click **Manage NuGet Packages for Solution**."},{"content":"Click the <bpt id=\"p1\">**</bpt>Browse<ept id=\"p1\">**</ept> tab, then search for <ph id=\"ph1\">`Microsoft Azure Service Bus Event Hub - EventProcessorHost`</ph>.","pos":[1737,1840],"source":"Click the **Browse** tab, then search for `Microsoft Azure Service Bus Event Hub - EventProcessorHost`."},{"content":"Ensure that the project name (<bpt id=\"p1\">**</bpt>Receiver<ept id=\"p1\">**</ept>) is specified in the <bpt id=\"p2\">**</bpt>Version(s)<ept id=\"p2\">**</ept> box.","pos":[1841,1924],"source":" Ensure that the project name (**Receiver**) is specified in the **Version(s)** box."},{"content":"Click <bpt id=\"p1\">**</bpt>Install<ept id=\"p1\">**</ept>, and accept the terms of use.","pos":[1925,1972],"source":" Click **Install**, and accept the terms of use."},{"pos":[2067,2300],"content":"Visual Studio downloads, installs, and adds a reference to the <bpt id=\"p1\">[</bpt>Azure Service Bus Event Hub - EventProcessorHost NuGet package<ept id=\"p1\">](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost)</ept>, with all its dependencies.","source":"Visual Studio downloads, installs, and adds a reference to the [Azure Service Bus Event Hub - EventProcessorHost NuGet package](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost), with all its dependencies."},{"content":"Right-click the <bpt id=\"p1\">**</bpt>Receiver<ept id=\"p1\">**</ept> project, click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept>, and then click <bpt id=\"p3\">**</bpt>Class<ept id=\"p3\">**</ept>.","pos":[2305,2383],"source":"Right-click the **Receiver** project, click **Add**, and then click **Class**."},{"content":"Name the new class <bpt id=\"p1\">**</bpt>SimpleEventProcessor<ept id=\"p1\">**</ept>, and then click <bpt id=\"p2\">**</bpt>Add<ept id=\"p2\">**</ept> to create the class.","pos":[2384,2472],"source":" Name the new class **SimpleEventProcessor**, and then click **Add** to create the class."},{"content":"Add the following statements at the top of the SimpleEventProcessor.cs file:","pos":[2571,2647]},{"content":"Then, substitute the following code for the body of the class:","pos":[2742,2804]},{"content":"This class will be called by the <bpt id=\"p1\">**</bpt>EventProcessorHost<ept id=\"p1\">**</ept> to process events received from the Event Hub.","pos":[4454,4556],"source":"This class will be called by the **EventProcessorHost** to process events received from the Event Hub."},{"content":"Note that the <ph id=\"ph1\">`SimpleEventProcessor`</ph> class uses a stopwatch to periodically call the checkpoint method on the <bpt id=\"p1\">**</bpt>EventProcessorHost<ept id=\"p1\">**</ept> context.","pos":[4557,4698],"source":" Note that the `SimpleEventProcessor` class uses a stopwatch to periodically call the checkpoint method on the **EventProcessorHost** context."},{"content":"This ensures that, if the receiver is restarted, it will lose no more than five minutes of processing work.","pos":[4699,4806]},{"pos":[4811,4896],"content":"In the <bpt id=\"p1\">**</bpt>Program<ept id=\"p1\">**</ept> class, add the following <ph id=\"ph1\">`using`</ph> statement at the top of the file:","source":"In the **Program** class, add the following `using` statement at the top of the file:"},{"pos":[4961,5215],"content":"Then, replace the <ph id=\"ph1\">`Main`</ph> method in the <ph id=\"ph2\">`Program`</ph> class with the following code, substituting the Event Hub name and the namespace-level connection string that you saved previously, and the storage account and key that you copied in the previous sections.","source":"Then, replace the `Main` method in the `Program` class with the following code, substituting the Event Hub name and the namespace-level connection string that you saved previously, and the storage account and key that you copied in the previous sections."},{"content":"This tutorial uses a single instance of <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>.","pos":[6409,6472],"source":" This tutorial uses a single instance of [EventProcessorHost][]."},{"content":"To increase throughput, it is recommended that you run multiple instances of <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept>, as shown in the <bpt id=\"p2\">[</bpt>Scaled out event processing<ept id=\"p2\">][]</ept> sample.","pos":[6473,6629],"source":" To increase throughput, it is recommended that you run multiple instances of [EventProcessorHost][], as shown in the [Scaled out event processing][] sample."},{"content":"In those cases, the various instances automatically coordinate with each other to load balance the received events.","pos":[6630,6745]},{"content":"If you want multiple receivers to each process <bpt id=\"p1\">*</bpt>all<ept id=\"p1\">*</ept> the events, you must use the <bpt id=\"p2\">**</bpt>ConsumerGroup<ept id=\"p2\">**</ept> concept.","pos":[6746,6854],"source":" If you want multiple receivers to each process *all* the events, you must use the **ConsumerGroup** concept."},{"content":"When receiving events from different machines, it might be useful to specify names for <bpt id=\"p1\">[</bpt>EventProcessorHost<ept id=\"p1\">][]</ept> instances based on the machines (or roles) in which they are deployed.","pos":[6855,7035],"source":" When receiving events from different machines, it might be useful to specify names for [EventProcessorHost][] instances based on the machines (or roles) in which they are deployed."},{"content":"For more information about these topics, see the <bpt id=\"p1\">[</bpt>Event Hubs Overview<ept id=\"p1\">][]</ept> and <bpt id=\"p2\">[</bpt>Event Hubs Programming Guide<ept id=\"p2\">][]</ept> topics.","pos":[7036,7153],"source":" For more information about these topics, see the [Event Hubs Overview][] and [Event Hubs Programming Guide][] topics."},{"content":"Event Hubs Overview","pos":[7171,7190]},{"content":"Event Hubs Programming Guide","pos":[7217,7245]},{"content":"Scaled out event processing","pos":[7281,7308]},{"content":"Azure Storage account","pos":[7375,7396]},{"content":"EventProcessorHost","pos":[7445,7463]},{"content":"Azure portal","pos":[7574,7586]}],"content":"## Receive messages with EventProcessorHost\n\n[EventProcessorHost][] is a .NET class that simplifies receiving events from Event Hubs by managing persistent checkpoints and parallel receives from those Event Hubs. Using [EventProcessorHost][], you can split events across multiple receivers, even when hosted in different nodes. This example shows how to use [EventProcessorHost][] for a single receiver. The [Scaled out event processing][] sample shows how to use [EventProcessorHost][] with multiple receivers.\n\nTo use [EventProcessorHost][], you must have an [Azure Storage account][]:\n\n1. Log on to the [Azure portal][], and click **New** at the top left of the screen.\n\n2. Click **Data + Storage**, then click **Storage account**.\n\n    ![](./media/service-bus-event-hubs-getstarted-receive-ephcs/create-storage1.png)\n\n3. In the **Create storage account** blade, type a name for the storage account. Choose an Azure subscription, resource group, and location in which to create the resource. Then click **Create**.\n\n    ![](./media/service-bus-event-hubs-getstarted-receive-ephcs/create-storage2.png)\n\n4. In the list of storage accounts, click the newly-created storage account.\n\n5. In the storage account blade, click **Access keys**. Copy the value of **key1** to use later in this tutorial.\n\n    ![](./media/service-bus-event-hubs-getstarted-receive-ephcs/create-storage3.png)\n\n4. In Visual Studio, create a new Visual C# Desktop App project using the **Console  Application** project template. Name the project **Receiver**.\n\n    ![](./media/service-bus-event-hubs-getstarted-receive-ephcs/create-receiver-csharp1.png)\n\n5. In Solution Explorer, right-click the solution, and then click **Manage NuGet Packages for Solution**.\n\n6. Click the **Browse** tab, then search for `Microsoft Azure Service Bus Event Hub - EventProcessorHost`. Ensure that the project name (**Receiver**) is specified in the **Version(s)** box. Click **Install**, and accept the terms of use.\n\n    ![](./media/service-bus-event-hubs-getstarted-receive-ephcs/create-eph-csharp1.png)\n\n    Visual Studio downloads, installs, and adds a reference to the [Azure Service Bus Event Hub - EventProcessorHost NuGet package](https://www.nuget.org/packages/Microsoft.Azure.ServiceBus.EventProcessorHost), with all its dependencies.\n\n7. Right-click the **Receiver** project, click **Add**, and then click **Class**. Name the new class **SimpleEventProcessor**, and then click **Add** to create the class.\n\n    ![](./media/service-bus-event-hubs-getstarted-receive-ephcs/create-receiver-csharp2.png)\n\n8. Add the following statements at the top of the SimpleEventProcessor.cs file:\n\n    ```\n    using Microsoft.ServiceBus.Messaging;\n    using System.Diagnostics;\n    ```\n\n    Then, substitute the following code for the body of the class:\n\n    ```\n    class SimpleEventProcessor : IEventProcessor\n    {\n        Stopwatch checkpointStopWatch;\n\n        async Task IEventProcessor.CloseAsync(PartitionContext context, CloseReason reason)\n        {\n            Console.WriteLine(\"Processor Shutting Down. Partition '{0}', Reason: '{1}'.\", context.Lease.PartitionId, reason);\n            if (reason == CloseReason.Shutdown)\n            {\n                await context.CheckpointAsync();\n            }\n        }\n\n        Task IEventProcessor.OpenAsync(PartitionContext context)\n        {\n            Console.WriteLine(\"SimpleEventProcessor initialized.  Partition: '{0}', Offset: '{1}'\", context.Lease.PartitionId, context.Lease.Offset);\n            this.checkpointStopWatch = new Stopwatch();\n            this.checkpointStopWatch.Start();\n            return Task.FromResult<object>(null);\n        }\n\n        async Task IEventProcessor.ProcessEventsAsync(PartitionContext context, IEnumerable<EventData> messages)\n        {\n            foreach (EventData eventData in messages)\n            {\n                string data = Encoding.UTF8.GetString(eventData.GetBytes());\n\n                Console.WriteLine(string.Format(\"Message received.  Partition: '{0}', Data: '{1}'\",\n                    context.Lease.PartitionId, data));\n            }\n\n            //Call checkpoint every 5 minutes, so that worker can resume processing from 5 minutes back if it restarts.\n            if (this.checkpointStopWatch.Elapsed > TimeSpan.FromMinutes(5))\n            {\n                await context.CheckpointAsync();\n                this.checkpointStopWatch.Restart();\n            }\n        }\n    }\n    ```\n\n    This class will be called by the **EventProcessorHost** to process events received from the Event Hub. Note that the `SimpleEventProcessor` class uses a stopwatch to periodically call the checkpoint method on the **EventProcessorHost** context. This ensures that, if the receiver is restarted, it will lose no more than five minutes of processing work.\n\n9. In the **Program** class, add the following `using` statement at the top of the file:\n\n    ```\n    using Microsoft.ServiceBus.Messaging;\n    ```\n\n    Then, replace the `Main` method in the `Program` class with the following code, substituting the Event Hub name and the namespace-level connection string that you saved previously, and the storage account and key that you copied in the previous sections. \n\n    ```\n    static void Main(string[] args)\n    {\n      string eventHubConnectionString = \"{Event Hub connection string}\";\n      string eventHubName = \"{Event Hub name}\";\n      string storageAccountName = \"{storage account name}\";\n      string storageAccountKey = \"{storage account key}\";\n      string storageConnectionString = string.Format(\"DefaultEndpointsProtocol=https;AccountName={0};AccountKey={1}\", storageAccountName, storageAccountKey);\n\n      string eventProcessorHostName = Guid.NewGuid().ToString();\n      EventProcessorHost eventProcessorHost = new EventProcessorHost(eventProcessorHostName, eventHubName, EventHubConsumerGroup.DefaultGroupName, eventHubConnectionString, storageConnectionString);\n      Console.WriteLine(\"Registering EventProcessor...\");\n      var options = new EventProcessorOptions();\n      options.ExceptionReceived += (sender, e) => { Console.WriteLine(e.Exception); };\n      eventProcessorHost.RegisterEventProcessorAsync<SimpleEventProcessor>(options).Wait();\n\n      Console.WriteLine(\"Receiving. Press enter key to stop worker.\");\n      Console.ReadLine();\n      eventProcessorHost.UnregisterEventProcessorAsync().Wait();\n    }\n    ```\n\n> [AZURE.NOTE] This tutorial uses a single instance of [EventProcessorHost][]. To increase throughput, it is recommended that you run multiple instances of [EventProcessorHost][], as shown in the [Scaled out event processing][] sample. In those cases, the various instances automatically coordinate with each other to load balance the received events. If you want multiple receivers to each process *all* the events, you must use the **ConsumerGroup** concept. When receiving events from different machines, it might be useful to specify names for [EventProcessorHost][] instances based on the machines (or roles) in which they are deployed. For more information about these topics, see the [Event Hubs Overview][] and [Event Hubs Programming Guide][] topics.\n\n<!-- Links -->\n[Event Hubs Overview]: event-hubs-overview.md\n[Event Hubs Programming Guide]: event-hubs-programming-guide.md\n[Scaled out event processing]: https://code.msdn.microsoft.com/Service-Bus-Event-Hub-45f43fc3\n[Azure Storage account]: ../storage/storage-create-storage-account.md\n[EventProcessorHost]: http://msdn.microsoft.com/library/azure/microsoft.servicebus.messaging.eventprocessorhost(v=azure.95).aspx\n[Azure portal]: https://portal.azure.com"}